{"remainingRequest":"/Users/lvjing/web-project/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lvjing/web-project/front/src/views/base/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lvjing/web-project/front/src/views/base/index.vue","mtime":1653905842624},{"path":"/Users/lvjing/web-project/front/node_modules/cache-loader/dist/cjs.js","mtime":1652685773640},{"path":"/Users/lvjing/web-project/front/node_modules/babel-loader/lib/index.js","mtime":1652685774572},{"path":"/Users/lvjing/web-project/front/node_modules/cache-loader/dist/cjs.js","mtime":1652685773640},{"path":"/Users/lvjing/web-project/front/node_modules/vue-loader/lib/index.js","mtime":1652685774920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGRhdGFUcHllTGlzdCwgZ2V0QmFzZURhdGEsIGdldFNjZW5lRGF0YSB9IGZyb20gJ0AvYXBpL2RhdGFzJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkYXRhQmFzZVR5cGVPcHRpb246IFtdLAogICAgICBkYXRhQmFzZVNjZW5lT3B0aW9uOiBbXSwKICAgICAgZ2V0QmFzZURhdGE6ICcnLAogICAgICBnZXRTY2VuZURhdGE6ICcnLAogICAgICBkYXRhQmFzZUZvcm06IHsKICAgICAgICAnZGF0YU5hbWUnOiAnJwogICAgICB9LAogICAgICBkYXRhU2NlbmVGb3JtOiB7CiAgICAgICAgJ3NjZW5lTmFtZSc6ICcnCiAgICAgIH0sCiAgICAgIHJlcTogewogICAgICAgIHBhZ2U6IDEsCiAgICAgICAgc2l6ZTogNgogICAgICB9LAogICAgICAvLyDliIbpobXpobXmlbAKICAgICAgdG90YWw6IDEwCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgdGhpcy5pbml0RGF0YVR5cGVMaXN0KCkKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOWIneWni+aVsOaNruexu+Wei+WIl+ihqAogICAgYXN5bmMgaW5pdERhdGFUeXBlTGlzdCgpIHsKICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGRhdGFUcHllTGlzdCh0aGlzLnJlcSkKICAgICAgaWYgKHJlc3Auc3VjY2VzcyA9PT0gdHJ1ZSkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzcC5pdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaWYgKHJlc3AuaXRlbXNbaV0uZGF0YV90eXBlID09PSAnYmFzZScpIHsKICAgICAgICAgICAgdGhpcy5kYXRhQmFzZVR5cGVPcHRpb24ucHVzaCh7CiAgICAgICAgICAgICAgdmFsdWU6IHJlc3AuaXRlbXNbaV0uZGF0YV9uYW1lLAogICAgICAgICAgICAgIGxhYmVsOiByZXNwLml0ZW1zW2ldLmRhdGFfY2gKICAgICAgICAgICAgfSkKICAgICAgICAgIH0gZWxzZSBpZiAocmVzcC5pdGVtc1tpXS5kYXRhX3R5cGUgPT09ICdzY2VuZScpIHsKICAgICAgICAgICAgdGhpcy5kYXRhQmFzZVNjZW5lT3B0aW9uLnB1c2goewogICAgICAgICAgICAgIHZhbHVlOiByZXNwLml0ZW1zW2ldLmRhdGFfbmFtZSwKICAgICAgICAgICAgICBsYWJlbDogcmVzcC5pdGVtc1tpXS5kYXRhX2NoCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcygi5p+l6K+i5oiQ5Yqf77yBIikKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCfmn6Xor6LlpLHotKXvvIEnKQogICAgICB9CiAgICB9LAogICAgYXN5bmMgZ2V0QmFzZURhdGFJbmZvKGRhdGFGb3JtKSB7CiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBnZXRCYXNlRGF0YShkYXRhRm9ybSkKICAgICAgaWYgKHJlc3Auc3VjY2VzcyA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMuZ2V0QmFzZURhdGEgPSBKU09OLnN0cmluZ2lmeShyZXNwLnJlc3VsdCwgbnVsbCwgMikKICAgICAgfQogICAgfSwKICAgIGFzeW5jIGdldFNjZW5lRGF0YUluZm8oZGF0YUZvcm0pIHsKICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGdldFNjZW5lRGF0YShkYXRhRm9ybSkKICAgICAgaWYgKHJlc3Auc3VjY2VzcyA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMuZ2V0U2NlbmVEYXRhID0gSlNPTi5zdHJpbmdpZnkocmVzcC5yZXN1bHQsIG51bGwsIDIpCiAgICAgIH0KICAgIH0sCiAgICAvLyDpgInkuK3pgInpobnvvIznlJ/miJDlr7nlupTnmoTmlbDmja4KICAgIGNoYW5nZUJhc2VEYXRhKCkgewogICAgICB0aGlzLmdldEJhc2VEYXRhSW5mbyh0aGlzLmRhdGFCYXNlRm9ybSkKICAgIH0sCiAgICBjaGFuZ2VTY2VuZURhdGEoKSB7CiAgICAgIHRoaXMuZ2V0U2NlbmVEYXRhSW5mbyh0aGlzLmRhdGFTY2VuZUZvcm0pCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/base","sourcesContent":["<template>\n  <div class=\"data-base\">\n    <el-card style=\"height: 100%;\">\n      <div style=\"height: 50px\">\n        <span>基础数据类型：</span>\n        <el-select v-model=\"dataBaseForm.dataName\" placeholder=\"请选择...\" @change=\"changeBaseData\">\n          <el-option\n            v-for=\"item in dataBaseTypeOption\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </div>\n      <div class=\"div-line\" style=\"height: 150px\">\n        <el-input\n          v-model=\"getBaseData\"\n          type=\"textarea\"\n          :rows=\"5\"\n          placeholder=\"生成的数据\"\n        />\n      </div>\n      <div style=\"height: 50px\">\n        <span>场景数据类型：</span>\n        <el-select v-model=\"dataSceneForm.sceneName\" placeholder=\"请选择...\" @change=\"changeSceneData\">\n          <el-option\n            v-for=\"item in dataBaseSceneOption\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </div>\n      <div class=\"div-line\" style=\"height: 350px\">\n        <el-input\n          v-model=\"getSceneData\"\n          type=\"textarea\"\n          :rows=\"15\"\n          placeholder=\"生成的数据\"\n        />\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { dataTpyeList, getBaseData, getSceneData } from '@/api/datas'\n\nexport default {\n  data() {\n    return {\n      dataBaseTypeOption: [],\n      dataBaseSceneOption: [],\n      getBaseData: '',\n      getSceneData: '',\n      dataBaseForm: {\n        'dataName': ''\n      },\n      dataSceneForm: {\n        'sceneName': ''\n      },\n      req: {\n        page: 1,\n        size: 6\n      },\n      // 分页页数\n      total: 10\n    }\n  },\n  mounted() {\n    this.initDataTypeList()\n  },\n  methods: {\n    // 初始数据类型列表\n    async initDataTypeList() {\n      const resp = await dataTpyeList(this.req)\n      if (resp.success === true) {\n        for (let i = 0; i < resp.items.length; i++) {\n          if (resp.items[i].data_type === 'base') {\n            this.dataBaseTypeOption.push({\n              value: resp.items[i].data_name,\n              label: resp.items[i].data_ch\n            })\n          } else if (resp.items[i].data_type === 'scene') {\n            this.dataBaseSceneOption.push({\n              value: resp.items[i].data_name,\n              label: resp.items[i].data_ch\n            })\n          }\n        }\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    async getBaseDataInfo(dataForm) {\n      const resp = await getBaseData(dataForm)\n      if (resp.success === true) {\n        this.getBaseData = JSON.stringify(resp.result, null, 2)\n      }\n    },\n    async getSceneDataInfo(dataForm) {\n      const resp = await getSceneData(dataForm)\n      if (resp.success === true) {\n        this.getSceneData = JSON.stringify(resp.result, null, 2)\n      }\n    },\n    // 选中选项，生成对应的数据\n    changeBaseData() {\n      this.getBaseDataInfo(this.dataBaseForm)\n    },\n    changeSceneData() {\n      this.getSceneDataInfo(this.dataSceneForm)\n    }\n  }\n}\n</script>\n"]}]}